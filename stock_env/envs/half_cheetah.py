import numpy as np
from gymnasium.envs.mujoco.half_cheetah_v4 import HalfCheetahEnv
from stock_env.data_loader import BaseTaskLoader
from gymnasium import register
import gymnasium as gym


def _make_cheetah_env(gamma=0.99, env_kwargs={}):
    def _thunk():
        env = HalfCheetahDirEnv(**env_kwargs)
        env = gym.wrappers.TimeLimit(env, max_episode_steps=100)
        env = gym.wrappers.RecordEpisodeStatistics(env)
        env = gym.wrappers.ClipAction(env)
        return env

    return _thunk


class HalfCheetahDirEnv(HalfCheetahEnv, BaseTaskLoader):
    """Half-cheetah environment with target direction, as described in [1]. The
    code is adapted from
    https://github.com/cbfinn/maml_rl/blob/9c8e2ebd741cb0c7b8bf2d040c4caeeb8e06cc95/rllab/envs/mujoco/half_cheetah_env_rand_direc.py

    The half-cheetah follows the dynamics from MuJoCo [2], and receives at each
    time step a reward composed of a control cost and a reward equal to its
    velocity in the target direction. The tasks are generated by sampling the
    target directions from a Bernoulli distribution on {-1, 1} with parameter
    0.5 (-1: backward, +1: forward).

    [1] Chelsea Finn, Pieter Abbeel, Sergey Levine, "Model-Agnostic
        Meta-Learning for Fast Adaptation of Deep Networks", 2017
        (https://arxiv.org/abs/1703.03400)
    [2] Emanuel Todorov, Tom Erez, Yuval Tassa, "MuJoCo: A physics engine for
        model-based control", 2012
        (https://homes.cs.washington.edu/~todorov/papers/TodorovIROS12.pdf)
    """

    def __init__(self, **kwargs):
        super(HalfCheetahDirEnv, self).__init__(**kwargs)

    def sample_task(self, num_tasks):
        directions = 2 * self.np_random.binomial(1, p=0.5, size=(num_tasks,)) - 1
        tasks = [{"direction": direction} for direction in directions]
        return tasks

    def reset_task(self, task):
        self._task = task
        self._forward_reward_weight = task["direction"]


register(
    id=f"HalfCheetahDir-v0",
    entry_point=_make_cheetah_env(env_kwargs={"ctrl_cost_weight": 0.05}),
)
